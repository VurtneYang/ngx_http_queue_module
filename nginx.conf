
worker_processes  1;

master_process  on;    
daemon          on;
 
worker_rlimit_core 102400000;
working_directory /tmp;
#error_log  logs/error.log  debug;
error_log  logs/error.log  error;
nlog 0.0.0.0:5001 127.0.0.1:5151;
custom_log  0.0.0.0:5006 127.0.0.1:5151;
events {
    worker_connections  10240;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr $time_iso8601 $msec $request_time $request_length '
					  '$connection $connection_requests $uri "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" ';
    access_log  logs/access.log main;
	access_nlog 0.0.0.0:5002 127.0.0.1:5151;
	log_subrequest on;
	include *backend.conf;

    keepalive_timeout  100;
    keepalive_requests 1024;
	client_header_timeout 100;
	client_body_timeout 100;
	
	lua_package_path '/usr/local/nginx/conf/?.lua;/usr/local/nginx/lua/lib/lua/5.1/?.lua;;';
    lua_package_cpath '/usr/local/nginx/lua/lib/lua/5.1/?.so;;';

	include *shm.conf;
    
	max_number_of_channels 10;
	max_messages_stored_per_channel 10000;
	queue_shm_zone 200M;

	server {
		listen       80;
		
		lua_check_client_abort on;
		include *server.conf;
		
		location =/add_queue {
		  	channel_id $arg_id; 
			channel_key $arg_key;
			add_queue;
		}
		
		location =/get_queue {
           	channel_id $arg_id;
            channel_key $arg_key;
            get_queue;
		}

		location =/delete_queue{
			channel_id $arg_id;
			delete_queue;
		}

		location =/statis_queue{
			statis_queue;
		}
        
		location =/ping {
			access_log off;
			log_subrequest off;
			if ($request_method != GET ) {
                        return 405;
                          }
			content_by_lua 'ngx.exit(ngx.HTTP_OK)';
		}

   }
		
	server {
		listen 1800;
 		server_name 127.0.0.1;
 		location /nginx-status {
 			allow 127.0.0.1;
 			#deny all;
 			stub_status on;
 			access_log off;
 	    }

	}
}
